from odoo.exceptions import AccessErrorfrom odoo.http import requestfrom odoo import httpfrom .. import mainimport datetimeimport pytzclass BAtchCollectionAPI(http.Controller):    @main.validate_token    @http.route('/batch_collection', auth='none', type='json', methods=['POST'], csef=False)    def fetch_all_collections(self):        try:            user = request.env.user            company_id = user.company_id.id            branch_id = user.branch_id.id            partner_id = int(request.jsonrequest['store_id'])            collections = request.jsonrequest['collections']            time_now = datetime.datetime.now(pytz.timezone('Asia/Dhaka'))            # preparing batch collection line vals            default_credit_account = request.env['saleotherexpense'].search([('company_id', '=', company_id)], limit=1)            cheque_in_hand_account_id = default_credit_account.cheque_in_hand_account_id.id            journal = request.env['account.journal'].search([('default_credit_account_id', '=', cheque_in_hand_account_id)], limit=1)            batch_collection_line_list = list()            for collection in collections:                collection_type = str(collection['type'])                amount = float(collection['amount'])                collection_line_vals = {                    'journal_id': journal.id,                    'partner_id': partner_id,                    'payment_type': 'inbound',                    'effective_date': time_now,                    'invoice_start_date': time_now,                    'invoice_end_date': time_now,                    'collection_reference': collection_type,                    'payment_method_id': 1,                    'amount': amount,                    'bank_id': False,                    'cheque_reference': False,                    'communication': False,                }                if collection_type == 'multiple_invoice':                    start_date = collection['start_date']                    end_date = collection['end_date']                    given_invoices = collection['invoice_list']                    invoices_names = list()                    for item in given_invoices:                        invoices_names.append(str(item['name']))                    invoices = request.env['account.move'].search([('name', 'in', invoices_names)])                    if start_date and end_date and start_date <= end_date and invoices:                        collection_line_vals['invoice_start_date'] = start_date                        collection_line_vals['invoice_end_date'] = end_date                        payment_invoice_ids = list()                        for item in invoices:                            payment_invoice_ids.append(item.id)                        collection_line_vals['payment_invoice_ids'] = [[6, False, payment_invoice_ids]]                    else:                        return {'message' : 'start date OR end date OR invoice list is not correct.'}                batch_collection_line_list.append([0, '0', collection_line_vals])            collection_vals = {                'company_id': company_id,                'payment_date': time_now,                'partner_type': 'customer',                'branch_id': branch_id,                'partner_id': partner_id,                'payment_type': 'inbound',                'batch_payment_line' : batch_collection_line_list,            }            created_collection = request.env['batch.payment'].create(collection_vals)            print('created_collection = ', created_collection)            created_collection.btn_approve()            return {'message' : 'successfull', 'collection' : created_collection.id}        except AccessError as e:            return {'message' : 'Something wrong. Cannot complete the action.'}            # return invalid_response("Access error", "Error: %s" % e.name)